# Convert Font Awesome, Google Material Design and Kenney Game icon font
# parameters to C++11, C89 and None compatible formats.
#
#------------------------------------------------------------------------------
# 1 - Source material
#
#   1.1 - Font Awesome
#			https://github.com/FortAwesome/Font-Awesome/blob/master/fonts/fontawesome-webfont.ttf
# 			https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/src/icons.yml
#   1.2 - Material Design
#			https://github.com/google/material-design-icons/blob/master/iconfont/MaterialIcons-Regular.ttf
# 			https://raw.githubusercontent.com/google/material-design-icons/master/iconfont/codepoints
#   1.3 - Kenney icons
#			https://github.com/SamBrishes/kenney-icon-font/blob/master/fonts/kenney-icon-font.ttf
# 			https://raw.githubusercontent.com/SamBrishes/kenney-icon-font/master/css/kenney-icons.css
#
#------------------------------------------------------------------------------
# 2 - Data samples
#
#   2.1 - Font Awesome
#           - input:          - name:       Music
#                               id:         music
#                               unicode:    f001
#                               created:    1.0
#                               filter:
#                                 - note
#                                 - sound
#                               categories:
#                                 - Web Application Icons
#           - output C++11:     #define ICON_FA_MUSIC u8"\uf001"
#           - output C89:       #define ICON_FA_MUSIC "\xEF\x80\x81"
#			- output None:		    var icon-fa-music ""
#
#   2.2 - Google Material Design icons
#           - input:            3d_rotation e84d
#           - output C++11:     #define ICON_MD_3D_ROTATION u8"\ue84d"
#           - output C89:       #define ICON_MD_3D_ROTATION "\xEE\xA1\x8D"
#			- output None:		    var icon-md-3d_rotation ""
#
#   2.3 - Kenney Game icons
#           - input:            .ki-home:before{ content: "\e900"; }
#           - output C++11:     #define ICON_KI_HOME u8"\ue900"
#           - output C89:       #define ICON_KI_HOME "\xEE\xA4\x80"
#			- output None:		    var icon-ki-home ""
#
#   2.4 - All fonts
#           - computed min and max unicode fonts ICON_MIN and ICON_MAX
#           - output C89, C++11:	#define ICON_MIN_FA 0xf000
#                               	#define ICON_MAX_FA 0xf295
#			- output None:			    var icon-min-fa 0xf000
#									    var icon-max-fa 0xf2b2
#
#------------------------------------------------------------------------------
# 3 - Script dependencies
#
#   3.1 - Python 2.7 - https://www.python.org/download/releases/2.7/
#   3.2 - Requests - http://docs.python-requests.org/
#   3.3 - PyYAML - http://pyyaml.org/
#
#------------------------------------------------------------------------------
# 4 - References
#
# None language: https://bitbucket.org/duangle/nonelang/src
#
#------------------------------------------------------------------------------


import requests
import yaml


UNICODE_MIN = 'ffff'
UNICODE_MAX = '0'
TIMEOUT = 2

MESSAGE_SUCCESS = '{!s} fonts - conversion success: {!s}'
MESSAGE_ERROR = '{!s} fonts - error \n\t{!s}'


# for each target language, add a new formatter class and
# define language, filename_template and line_format as in the examples below.


class FormatterC:
	language = 'C89'
	filename_template = '{name}_c.h'

	@classmethod
	def prelude( cls, url, tff ):
		result = ('// Generated by GenerateIconFontCppHeaders.py for language {!s}\n' + \
				  '// from {!s}\n' + \
				  '// for use with {!s}\n' + \
				  '#pragma once\n\n').format( cls.language, url, tff )
		return result

	@staticmethod
	def line_format_minmax( name, font_abbreviation, val ):
		result = '#define ICON_{!s}_{!s} 0x{!s}\n'.format( name, font_abbreviation, val )
		return result

	@staticmethod
	def line_format( font_abbreviation, font, unicode ):
		unicode_base = ''.join([ '{0:x}'.format(ord(x)) for x in unichr(int(unicode, 16)).encode('utf-8') ]).upper()
		unicode = '\\x' + unicode_base[ :2 ] + '\\x' + unicode_base[ 2 :4 ] + '\\x' + unicode_base[ 4 : ]
		result = '#define ICON_{!s}_{!s} "{!s}"\n'.format( font_abbreviation, font, unicode )
		return result


class FormatterCpp11( FormatterC ):
	language = 'C++11'
	filename_template = '{name}.h'

	@staticmethod
	def line_format( font_abbreviation, font, unicode ):
		result = '#define ICON_{!s}_{!s} u8"\u{!s}"\n'.format( font_abbreviation, font, unicode )
		return result


class FormatterNonelang:
	language = 'None'
	filename_template = '{name}.n'

	@classmethod
	def prelude( cls, url, tff ):
		result = ('none\n' + \
				  '; Generated by GenerateIconFontCppHeaders.py for language {!s}\n' + \
				  '; from {!s}\n' + \
				  '; for use with {!s}\n' + \
				  "\n$\n").format( cls.language, url, tff )
		return result

	@staticmethod
	def line_format_minmax( name, font_abbreviation, val ) :
		result = '    var icon-{!s}-{!s} 0x{!s}\n'.format( name.lower(), font_abbreviation.lower(), val )
		return result

	@staticmethod
	def line_format( font_abbreviation, font, unicode ):
		unicode = unichr(int(unicode, 16)).encode('utf-8')
		result = '    var icon-{!s}-{!s} "{!s}"\n'.format( font_abbreviation.lower(), font.lower(), unicode )
		return result




def convert_font_awesome( formatter ):
	font_name = 'Font Awesome'
	font_abbreviation = 'FA'
	source_url = 'https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/src/icons.yml'
	file_tff = 'https://github.com/FortAwesome/Font-Awesome/blob/master/fonts/fontawesome-webfont.ttf'
	output_name = 'IconsFontAwesome'

	try:
		response = requests.get( source_url, timeout = TIMEOUT )
		if response.status_code == 200:
			input = yaml.safe_load( response.content )
			min = UNICODE_MIN
			max = UNICODE_MAX
			output_fonts = ''
			for item in input[ 'icons' ]:
				font = ''
				for char in item[ 'id' ]:
					font += '_' if ( char == '-' ) else str.upper( char )
				unicode = item[ 'unicode' ]
				if unicode < min:
					min = unicode
				elif unicode >= max:
					max = unicode
				output_fonts += formatter.line_format( font_abbreviation, font, unicode )
			output = formatter.prelude( source_url, file_tff ) + \
					 formatter.line_format_minmax( 'MIN', font_abbreviation, min) + \
					 formatter.line_format_minmax( 'MAX', font_abbreviation, max) + \
					 output_fonts
			output_file = formatter.filename_template.format( name = output_name )
			with open( output_file, 'w' ) as f:
				f.write( output )
			print( MESSAGE_SUCCESS.format( font_name, output_file ))
	except Exception as e:
		print( MESSAGE_ERROR.format( font_name, e ))


def convert_material_design( formatter ):
	font_name = 'Material Design'
	font_abbreviation = 'MD'
	source_url = 'https://raw.githubusercontent.com/google/material-design-icons/master/iconfont/codepoints'
	file_tff = 'https://github.com/google/material-design-icons/blob/master/iconfont/MaterialIcons-Regular.ttf'
	output_name = 'IconsMaterialDesign'

	try:
		response = requests.get( source_url, timeout = TIMEOUT )
		if response.status_code == 200:
			input = str.split( response.content, '\n' )
			min = UNICODE_MIN
			max = UNICODE_MAX
			output_fonts = ''
			for line in input:
				words = str.split( line )
				if words:
					font = ''
					for char in words[ 0 ]:
						font += '_' if ( char == '-' ) else str.upper( char )
					unicode = words[ 1 ]
					if unicode < min:
						min = unicode
					elif unicode >= max:
						max = unicode
					output_fonts += formatter.line_format(font_abbreviation, font, unicode)
			output = formatter.prelude( source_url, file_tff ) + \
					 formatter.line_format_minmax( 'MIN', font_abbreviation, min) + \
					 formatter.line_format_minmax( 'MAX', font_abbreviation, max) + \
					 output_fonts
			output_file = formatter.filename_template.format( name = output_name )
			with open( output_file, 'w' ) as f:
				f.write( output )
			print( MESSAGE_SUCCESS.format( font_name, output_file ))
	except Exception as e:
		print( MESSAGE_ERROR.format( font_name, e ))


def convert_kenney( formatter ):
	font_name = 'Kenney'
	font_abbreviation = 'KI'
	source_url = 'https://raw.githubusercontent.com/SamBrishes/kenney-icon-font/master/css/kenney-icons.css'
	file_tff = 'https://github.com/SamBrishes/kenney-icon-font/blob/master/fonts/kenney-icon-font.ttf'
	output_name = 'IconsKenney'

	try:
		response = requests.get( source_url, timeout = TIMEOUT )
		if response.status_code == 200:
			input = str.split( response.content, '\n' )
			min = UNICODE_MIN
			max = UNICODE_MAX
			output_fonts = ''
			font_begin= '.ki-'
			font_end = ':before'
			unicode_begin = '"\\'
			unicode_end = '";'
			for line in input:
				words = str.split( line )
				if words:
					if font_begin in words[ 0 ]:
						font = ''
						word = words[ 0 ][( words[ 0 ].find( font_begin ) + len( font_begin )) : ( words[ 0 ].find( font_end ))]
						for char in word:
							font += '_' if ( char == '-' ) else str.upper( char )
						unicode = str( words[ 2 ][( words[ 2 ].find( unicode_begin ) + len( unicode_begin )) : words[ 2 ].find( unicode_end )])
						if unicode < min:
							min = unicode
						elif unicode >= max:
							max = unicode
						output_fonts += formatter.line_format(font_abbreviation, font, unicode)
			output = formatter.prelude( source_url, file_tff ) + \
					 formatter.line_format_minmax( 'MIN', font_abbreviation, min) + \
					 formatter.line_format_minmax( 'MAX', font_abbreviation, max) + \
					 output_fonts
			output_file = formatter.filename_template.format( name = output_name )
			with open( output_file, 'w' ) as f:
				f.write( output )
			print( MESSAGE_SUCCESS.format( font_name, output_file ))
	except Exception as e:
		print( MESSAGE_ERROR.format( font_name, e ))


# Main

formatters = [ FormatterC, FormatterCpp11, FormatterNonelang, ]

for formatter in formatters:
	convert_font_awesome( formatter )
	convert_material_design( formatter )
	convert_kenney( formatter )
